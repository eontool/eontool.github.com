<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GNU Radio Companion | Telecomunicaciones ↯]]></title>
  <link href="http://eontool.github.io/blog/categories/gnu-radio-companion/atom.xml" rel="self"/>
  <link href="http://eontool.github.io/"/>
  <updated>2013-08-22T17:32:50-07:00</updated>
  <id>http://eontool.github.io/</id>
  <author>
    <name><![CDATA[Daniel Dominguez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Construcción de Módulos y Bloques en GNU Radio Companion]]></title>
    <link href="http://eontool.github.io/blog/2013/08/20/construccion-de-modulos-y-bloques-en-gnu-radio-companion/"/>
    <updated>2013-08-20T16:08:00-07:00</updated>
    <id>http://eontool.github.io/blog/2013/08/20/construccion-de-modulos-y-bloques-en-gnu-radio-companion</id>
    <content type="html"><![CDATA[<p>Los módulos en GNU Radio nos permiten extender la funcionalidad de la plataforma, es decir, podemos construir bloques con nuestro propio código para el procesamiento de datos y así tener mayor flexibilidad al trabajar en un entorno de simulación y emulación.</p>

<!-- more -->


<p>Para este tutorial asumimos que completamos satistactoriamente la <a href="http://eontool.github.io/blog/2013/04/30/instalacion-gnuradio-companion-en-ubuntu/">instalación de GNU Radio Companion</a>.</p>

<p>Dentro de nuestra carpeta “grc” creamos otra llamada “módulos”:
<code>
$ mkdir modulos &amp;&amp; cd modulos
</code></p>

<p>Descargamos gr-modtool, una herramienta que nos facilitará el proceso en la generación de bloques:
<a href="https://github.com/mbant/gr-modtool">https://github.com/mbant/gr-modtool</a>
Despues extraemos el contenido del archivo que descargamos en la carpeta "modulos".</p>

<p>Utilizando gr-modtool, crearemos un nuevo módulo llamado “miMod”:
<code>
$ gr_moodtool newmod miMod
</code></p>

<p>Al revisar el contenido de la carpeta"modulos", vemos que se ha creado una nueva carpeta llamada “gr-miMod”, ahora tenemos que hacer una copia el archivo "gr_moodtool.py" dentro de nuestra nueva carpeta.</p>

<p>En nuestra terminal lo veremos de esta manera:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hal9000@hal9000:~/grc/modulos<span class="nv">$ </span>gr_modtool newmod miMod
</span><span class='line'>Creating out-of-tree module in ./gr-miMod... Done.
</span><span class='line'>Use <span class="s1">&#39;gr_modtool add&#39;</span> to add a new block to this currently empty module.
</span><span class='line'>hal9000@hal9000:~/grc/modulos<span class="nv">$ </span>ls
</span><span class='line'>gr-miMod  gr_modtool.py
</span><span class='line'>hal9000@hal9000:~/grc/modulos<span class="nv">$ </span><span class="nb">cd </span>gr-miMod
</span><span class='line'>hal9000@hal9000:~/grc/modulos/gr-miMod<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Contenido en la carpeta del modulo "gr-miMod":
<img class="center" src="/images/posts/contenido_grc_modtool.png" title="Carpeta" alt="images"></p>

<p>Creación de nuevo bloque llamado "sumador" tipo "general" con las variables tipo "int" llamadas "var1" y "var2":
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hal9000@hal9000:~/grc/modulos/gr-miMod<span class="nv">$ </span>gr_modtool add sumador
</span><span class='line'>GNU Radio module name identified: miMod
</span><span class='line'>Enter code <span class="nb">type</span>:
</span><span class='line'>Must be one of <span class="o">(</span><span class="s1">&#39;sink&#39;</span>, <span class="s1">&#39;source&#39;</span>, <span class="s1">&#39;sync&#39;</span>, <span class="s1">&#39;decimator&#39;</span>, <span class="s1">&#39;interpolator&#39;</span>, <span class="s1">&#39;general&#39;</span>, <span class="s1">&#39;tagged_stream&#39;</span>, <span class="s1">&#39;hier&#39;</span>, <span class="s1">&#39;noblock&#39;</span><span class="o">)</span>
</span><span class='line'>Enter code <span class="nb">type</span>: general
</span><span class='line'>Language: C++
</span><span class='line'>Block/code identifier: sumador
</span><span class='line'>Enter valid argument list, including default arguments: int var1, int var2
</span><span class='line'>Add Python QA code? <span class="o">[</span>Y/n<span class="o">]</span>
</span><span class='line'>Add C++ QA code? <span class="o">[</span>y/N<span class="o">]</span>
</span><span class='line'>Adding file <span class="s1">&#39;sumador_impl.h&#39;</span>...
</span><span class='line'>Adding file <span class="s1">&#39;sumador_impl.cc&#39;</span>...
</span><span class='line'>Adding file <span class="s1">&#39;sumador.h&#39;</span>...
</span><span class='line'>Editing swig/miMod_swig.i...
</span><span class='line'>Adding file <span class="s1">&#39;qa_sumador.py&#39;</span>...
</span><span class='line'>Editing python/CMakeLists.txt...
</span><span class='line'>Adding file <span class="s1">&#39;miMod_sumador.xml&#39;</span>...
</span><span class='line'>Editing grc/CMakeLists.txt...
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Contenido en la carpeta del modulo "gr-miMod/lib" donde podemos ver dos archivos llamados "sumador_impl.cc" y "sumador_impl.h":
<img class="center" src="/images/posts/miMod_lib.png" title="Carpeta" alt="images"></p>

<p>Abrimos el archivo ".cc" y podemos ver una sección donde especifica la parte donde podemos escribir nuestro código.
<img class="center" src="/images/posts/codigo_do_signal_processing.png" title="Carpeta" alt="images"></p>

<p>Hasta este punto hemos creado un módulo y un bloque de procesamiento, en el siguiente tutorial veremos la configuración del bloque y finalizaremos el sumador para probarlo en GNU Radio Companion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instalación de GNU Radio Companion 3.7.0 en Ubuntu 13.04 x64]]></title>
    <link href="http://eontool.github.io/blog/2013/04/30/instalacion-gnuradio-companion-en-ubuntu/"/>
    <updated>2013-04-30T21:58:00-07:00</updated>
    <id>http://eontool.github.io/blog/2013/04/30/instalacion-gnuradio-companion-en-ubuntu</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/posts/gnuradio_logo.png" title="GNU Radio Companion" alt="images"></p>

<p>Para este tutorial trabajaremos con la versión 13.04 x64 de Ubuntu.
Vamos a utilizar PyBOMBS (Python Build Overlay Managed Bundle System), que es un nuevo método para instalar GNU Radio que resuelve dependencias y hace más sencillo añadir proyectos out-of-tree (plugins).</p>

<!-- more -->


<p><blockquote><p>GNU Radio es una herramiente de desarrollo libre y abierta que provee bloques de procesamiento de señal para impementar sistemas de radio definida por software. Puede utilizarse con hardware de RF de bajo costo para crear radios definidas por software, o sin hardware en un ambiente de simulación. Es utilizada extensivamente por ambientes académicos, aficionados y comerciales para dar soporte a la investigación en comunicaciones inalámbricas y en sistemas de radio en el mundo real.</p><footer><strong>Wikipedia</strong> <cite><a href='http://es.wikipedia.org/wiki/GNU_Radio'>es.wikipedia.org/wiki/GNU_Radio/&hellip;</a></cite></footer></blockquote></p>

<p><img class="left" src="/images/posts/gnuradio_companion_install.png" width="600" height="400" title="GNU Radio Companion" alt="images"></p>

<p>Antes de iniciar debemos instalar GIT, para ello, abrimos una terminal y ejecutamos el siguiente comando:
<code>
$ sudo apt-get install git-core
</code></p>

<p>Creamos una carpeta llamada  “grc” en nuestro directorio “Home”:
<code>
$ mkdir grc &amp;&amp; cd grc
</code></p>

<p>Descargamos PyBOMBS:
<code>
$ git clone git://github.com/pybombs/pybombs
$ cd pybombs
</code>
Instalamos GNU Radio Companion:
<code>
$sudo ./pybombs install gnuradio
</code>
(Presionamos “Enter” a todas las configuraciones)</p>

<p>Ejecutamos GNU Radio Companion:
<code>
$ gnuradio-companion
</code></p>

<p>En dado caso que esto no funcione, navegamos hasta el directorio grc/pybombs/src/gnuradio/build y allí ejecutamos el comando:
<code>
$sudo make install
</code></p>

<p>Por último actualizamos los links hacia las recientes librerías creadas.
<code>
$ sudo ldconfig
</code></p>

<p>Hemos finalizado la instalación.</p>
]]></content>
  </entry>
  
</feed>
