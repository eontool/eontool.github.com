<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gr-modtool | Espectro ↯]]></title>
  <link href="http://eontool.github.io/blog/categories/gr-modtool/atom.xml" rel="self"/>
  <link href="http://eontool.github.io/"/>
  <updated>2013-08-22T12:40:32-07:00</updated>
  <id>http://eontool.github.io/</id>
  <author>
    <name><![CDATA[Daniel Dominguez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Construcción de Módulos y Bloques en GNU Radio Companion]]></title>
    <link href="http://eontool.github.io/blog/2013/08/20/construccion-de-modulos-y-bloques-en-gnu-radio-companion/"/>
    <updated>2013-08-20T16:08:00-07:00</updated>
    <id>http://eontool.github.io/blog/2013/08/20/construccion-de-modulos-y-bloques-en-gnu-radio-companion</id>
    <content type="html"><![CDATA[<p>Los módulos en GNU Radio nos permiten extender la funcionalidad de la plataforma, es decir, podemos construir bloques con nuestro propio código para el procesamiento de datos y así tener mayor flexibilidad al trabajar en un entorno de simulación y emulación.</p>

<!-- more -->


<p>Para este tutorial asumimos que completamos satistactoriamente la <a href="http://eontool.github.io/blog/2013/04/30/instalacion-gnuradio-companion-en-ubuntu/">instalación de GNU Radio Companion</a>.</p>

<p>Dentro de nuestra carpeta “grc” creamos otra llamada “módulos”:
<code>
$ mkdir modulos &amp;&amp; cd modulos
</code></p>

<p>Descargamos gr-modtool, una herramienta que nos facilitará el proceso en la generación de bloques:
<a href="https://github.com/mbant/gr-modtool">https://github.com/mbant/gr-modtool</a>
Despues extraemos el contenido del archivo que descargamos en la carpeta "modulos".</p>

<p>Utilizando gr-modtool, crearemos un nuevo módulo llamado “miMod”:
<code>
$ gr_moodtool newmod miMod
</code></p>

<p>Al revisar el contenido de la carpeta"modulos", vemos que se ha creado una nueva carpeta llamada “gr-miMod”, ahora tenemos que hacer una copia el archivo "gr_moodtool.py" dentro de nuestra nueva carpeta.</p>

<p>En nuestra terminal lo veremos de esta manera:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hal9000@hal9000:~/grc/modulos<span class="nv">$ </span>gr_modtool newmod miMod
</span><span class='line'>Creating out-of-tree module in ./gr-miMod... Done.
</span><span class='line'>Use <span class="s1">&#39;gr_modtool add&#39;</span> to add a new block to this currently empty module.
</span><span class='line'>hal9000@hal9000:~/grc/modulos<span class="nv">$ </span>ls
</span><span class='line'>gr-miMod  gr_modtool.py
</span><span class='line'>hal9000@hal9000:~/grc/modulos<span class="nv">$ </span><span class="nb">cd </span>gr-miMod
</span><span class='line'>hal9000@hal9000:~/grc/modulos/gr-miMod<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Contenido en la carpeta del modulo "gr-miMod":
<img class="center" src="/images/posts/contenido_grc_modtool.png" title="Carpeta" alt="images"></p>

<p>Creación de nuevo bloque llamado "sumador" tipo "general" con las variables tipo "int" llamadas "var1" y "var2":
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hal9000@hal9000:~/grc/modulos/gr-miMod<span class="nv">$ </span>gr_modtool add sumador
</span><span class='line'>GNU Radio module name identified: miMod
</span><span class='line'>Enter code <span class="nb">type</span>:
</span><span class='line'>Must be one of <span class="o">(</span><span class="s1">&#39;sink&#39;</span>, <span class="s1">&#39;source&#39;</span>, <span class="s1">&#39;sync&#39;</span>, <span class="s1">&#39;decimator&#39;</span>, <span class="s1">&#39;interpolator&#39;</span>, <span class="s1">&#39;general&#39;</span>, <span class="s1">&#39;tagged_stream&#39;</span>, <span class="s1">&#39;hier&#39;</span>, <span class="s1">&#39;noblock&#39;</span><span class="o">)</span>
</span><span class='line'>Enter code <span class="nb">type</span>: general
</span><span class='line'>Language: C++
</span><span class='line'>Block/code identifier: sumador
</span><span class='line'>Enter valid argument list, including default arguments: int var1, int var2
</span><span class='line'>Add Python QA code? <span class="o">[</span>Y/n<span class="o">]</span>
</span><span class='line'>Add C++ QA code? <span class="o">[</span>y/N<span class="o">]</span>
</span><span class='line'>Adding file <span class="s1">&#39;sumador_impl.h&#39;</span>...
</span><span class='line'>Adding file <span class="s1">&#39;sumador_impl.cc&#39;</span>...
</span><span class='line'>Adding file <span class="s1">&#39;sumador.h&#39;</span>...
</span><span class='line'>Editing swig/miMod_swig.i...
</span><span class='line'>Adding file <span class="s1">&#39;qa_sumador.py&#39;</span>...
</span><span class='line'>Editing python/CMakeLists.txt...
</span><span class='line'>Adding file <span class="s1">&#39;miMod_sumador.xml&#39;</span>...
</span><span class='line'>Editing grc/CMakeLists.txt...
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Contenido en la carpeta del modulo "gr-miMod/lib" donde podemos ver dos archivos llamados "sumador_impl.cc" y "sumador_impl.h":
<img class="center" src="/images/posts/miMod_lib.png" title="Carpeta" alt="images"></p>

<p>Abrimos el archivo ".cc" y podemos ver una sección donde especifica la parte donde podemos escribir nuestro código.
<img class="center" src="/images/posts/codigo_do_signal_processing.png" title="Carpeta" alt="images"></p>

<p>Hasta este punto hemos creado un módulo y un bloque de procesamiento, en el siguiente tutorial veremos la configuración del bloque y finalizaremos el sumador para probarlo en GNU Radio Companion.</p>
]]></content>
  </entry>
  
</feed>
